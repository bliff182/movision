{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/CharacterCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Navbar","id","score","highScore","Jumbotron","CharacterCard","onClick","clickChar","alt","name","src","image","Footer","App","state","characters","clicked","includes","setState","concat","console","log","setHighScore","shuffle","i","length","item","randomIndex","Math","floor","random","this","map","char","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"isEAOeA,MAJf,SAAiBC,GAChB,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCYzBC,MAbf,SAAgBH,GACf,OACC,yBAAKC,UAAU,8BACd,0BAAMA,UAAU,wBAAhB,gBACA,0BAAMA,UAAU,wBAAhB,4BAEA,0BAAMA,UAAU,uBAAuBG,GAAG,cAA1C,kBACiBJ,EAAMK,MADvB,IAC8B,mCAD9B,gBAC0DL,EAAMM,a,MCOpDC,MAdf,SAAmBP,GAClB,OACC,yBAAKC,UAAU,6BACd,yBAAKA,UAAU,aACd,wBAAIA,UAAU,aAAaD,EAAME,UACjC,uBAAGD,UAAU,QAAb,kF,MCKWO,MAVf,SAAuBR,GACtB,OACC,yBAAKC,UAAU,QACd,yBAAKA,UAAU,MAAMQ,QAAS,kBAAMT,EAAMU,UAAUV,EAAMI,MACzD,yBAAKO,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,MAAOb,UAAU,qB,MCUvCc,MAbf,WACC,OACC,4BAAQd,UAAU,UAAlB,qBACoB,IACnB,yBACCG,GAAG,OACHO,IAAI,QACJE,IAAI,+E,OC8DOG,E,2MA/DdC,MAAQ,CACPC,aACAb,MAAO,EACPC,UAAW,EACXa,QAAS,I,EAGVT,UAAY,SAAAN,GACN,EAAKa,MAAME,QAAQC,SAAShB,GAShC,EAAKiB,SAAS,CACbF,QAAS,GACTd,MAAO,KAVR,EAAKgB,SAAS,CAEbF,QAAS,EAAKF,MAAME,QAAQG,OAAOlB,GACnCC,MAAO,EAAKY,MAAMZ,MAAQ,IAE3BkB,QAAQC,IAAR,iBAAsB,EAAKP,MAAMZ,QACjCkB,QAAQC,IAAR,sBAA2B,EAAKP,MAAMX,aAOvC,EAAKmB,eACL,EAAKC,W,yEAIL,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAWU,OAAQD,IAAK,CAC3C,IAAIE,EAAOX,EAAWS,GAChBG,EAAcC,KAAKC,MAAMD,KAAKE,SAAWf,EAAWU,QAC1DV,EAAWS,GAAKT,EAAWY,GAC3BZ,EAAWY,GAAeD,K,qCAKvBK,KAAKjB,MAAMZ,OAAS6B,KAAKjB,MAAMX,WAClC4B,KAAKb,SAAS,CAAEf,UAAW4B,KAAKjB,MAAMZ,U,+BAI9B,IAAD,OACR,OACC,6BACC,kBAAC,EAAD,CAAQA,MAAO6B,KAAKjB,MAAMZ,MAAOC,UAAW4B,KAAKjB,MAAMX,YACvD,kBAAC,EAAD,4CACA,kBAAC,EAAD,KACE4B,KAAKjB,MAAMC,WAAWiB,KAAI,SAAAC,GAAI,OAC9B,kBAAC,EAAD,CACChC,GAAIgC,EAAKhC,GACTiC,IAAKD,EAAKhC,GACVQ,KAAMwB,EAAKxB,KACXE,MAAOsB,EAAKtB,MACZJ,UAAW,EAAKA,gBAInB,kBAAC,EAAD,W,GA1Dc4B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ce87399f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n\treturn <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n\treturn (\n\t\t<nav className=\"navbar navbar-dark bg-dark\">\n\t\t\t<span className=\"navbar-brand mb-0 h1\">Clicky Game!</span>\n\t\t\t<span className=\"navbar-brand mb-0 h1\">Click an image to begin!</span>\n\t\t\t{/* prettier-ignore */}\n\t\t\t<span className=\"navbar-brand mb-0 h1\" id=\"scoreboard\">\n\t\t\t\tCurrent Score: {props.score} <span>|</span> High Score: {props.highScore}\n\t\t\t</span>\n\t\t</nav>\n\t);\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n\treturn (\n\t\t<div className=\"jumbotron jumbotron-fluid\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<h1 className=\"display-4\">{props.children}</h1>\n\t\t\t\t<p className=\"lead\">\n\t\t\t\t\tClick the characters to earn points, but don't click on any more than\n\t\t\t\t\tonce!\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<div className=\"img\" onClick={() => props.clickChar(props.id)}>\n\t\t\t\t<img alt={props.name} src={props.image} className=\"img-thumbnail\"></img>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\";\n// import\n\nfunction Footer() {\n\treturn (\n\t\t<footer className=\"footer\">\n\t\t\tCreated with React{\" \"}\n\t\t\t<img\n\t\t\t\tid=\"logo\"\n\t\t\t\talt=\"react\"\n\t\t\t\tsrc=\"https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png\"\n\t\t\t></img>\n\t\t</footer>\n\t);\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\tstate = {\n\t\tcharacters,\n\t\tscore: 0,\n\t\thighScore: 0,\n\t\tclicked: []\n\t};\n\n\tclickChar = id => {\n\t\tif (!this.state.clicked.includes(id)) {\n\t\t\tthis.setState({\n\t\t\t\t// clicked: this.state.clicked.push(id),\n\t\t\t\tclicked: this.state.clicked.concat(id),\n\t\t\t\tscore: this.state.score + 1\n\t\t\t});\n\t\t\tconsole.log(`score: ${this.state.score}`);\n\t\t\tconsole.log(`high score: ${this.state.highScore}`);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tclicked: [],\n\t\t\t\tscore: 0\n\t\t\t});\n\t\t}\n\t\tthis.setHighScore();\n\t\tthis.shuffle();\n\t};\n\n\tshuffle() {\n\t\tfor (let i = 0; i < characters.length; i++) {\n\t\t\tlet item = characters[i];\n\t\t\tconst randomIndex = Math.floor(Math.random() * characters.length);\n\t\t\tcharacters[i] = characters[randomIndex];\n\t\t\tcharacters[randomIndex] = item;\n\t\t}\n\t}\n\n\tsetHighScore() {\n\t\tif (this.state.score >= this.state.highScore) {\n\t\t\tthis.setState({ highScore: this.state.score });\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar score={this.state.score} highScore={this.state.highScore} />\n\t\t\t\t<Jumbotron>Arrested Development - Clicky Game!</Jumbotron>\n\t\t\t\t<Wrapper>\n\t\t\t\t\t{this.state.characters.map(char => (\n\t\t\t\t\t\t<CharacterCard\n\t\t\t\t\t\t\tid={char.id}\n\t\t\t\t\t\t\tkey={char.id}\n\t\t\t\t\t\t\tname={char.name}\n\t\t\t\t\t\t\timage={char.image}\n\t\t\t\t\t\t\tclickChar={this.clickChar}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</Wrapper>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}